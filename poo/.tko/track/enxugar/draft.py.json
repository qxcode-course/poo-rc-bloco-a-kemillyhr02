{
    "patches": [
        {
            "label": "2025-09-23_14-16-33",
            "content": "@@ -747,19 +747,20 @@\n urn f%22Co\n+lo\n r:\n- \n %7Bself.co\n@@ -769,16 +769,12 @@\n r%7D, \n-tamanho \n+Size\n :%7Bse\n@@ -787,17 +787,12 @@\n e%7D, \n-umidade: \n+Wet:\n %7Bsel\n@@ -983,34 +983,8 @@\n rio%0A\n-        print(%22$%22 + line)%0A\n     \n@@ -1118,21 +1118,19 @@\n %5B0%5D == %22\n-criar\n+new\n %22: # col\n@@ -1245,91 +1245,8 @@\n ze)%0A\n-        elif args%5B0%5D== %22seca%22:%0A            print(%22Sim if towel.isdry() else Nao %22)%0A\n     \n@@ -1370,15 +1370,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n@@ -1443,19 +1443,18 @@\n rint(%22fa\n+i\n l\n-ha\n : comand\n",
            "lines": "50"
        },
        {
            "label": "2025-09-30_13-21-25",
            "content": "@@ -768,17 +768,17 @@\n r%7D, \n-T\n+t\n amanho\n-:\n  \n+:\n %7Bsel\n@@ -790,9 +790,9 @@\n e%7D, \n-U\n+u\n mida\n",
            "lines": "53"
        },
        {
            "label": "2025-09-30_13-24-53",
            "content": "@@ -814,129 +814,8 @@\n ss%7D%22\n-%0A    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False\n %0A%0Ade\n@@ -1320,16 +1320,27 @@\n         \n+print(%22Sim \n if towel\n@@ -1346,88 +1346,23 @@\n l.is\n-D\n+d\n ry()\n-:%0A                print(%22sim%22)%0A            else:%0A                print(%22n\n+ else N\n ao\n+ \n %22)%0A \n",
            "lines": "53"
        },
        {
            "label": "2025-09-30_13-29-08",
            "content": "@@ -1564,15 +1564,11 @@\n == %22\n-enxugar\n+dry\n %22:%0A \n",
            "lines": "62"
        },
        {
            "label": "2025-09-30_13-30-07",
            "content": "@@ -371,18 +371,36 @@\n lha \n-encharcada\n+saturada, ensopada, pingando\n %22)%0A%0A\n",
            "lines": "62"
        },
        {
            "label": "2025-09-30_13-30-52",
            "content": "@@ -1685,80 +1685,8 @@\n el)%0A\n-        elif args%5B0%5D== %22torcer%22:%0A            towel.wringOut()%0A        %0A%0A\n     \n",
            "lines": "62"
        },
        {
            "label": "2025-09-30_13-32-54",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n    \n    def isDry(self):\n        if self.wetness == 0 :\n            return True\n        else :\n            return False\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0]== \"seca\":\n            if towel.isDry():\n                print(\"sim\")\n            else:\n                print(\"nao\")\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        elif args[0]== \"torcer\":\n            towel.wringOut()\n        \n\n        else: # 7: erro\n            print(\"falha: comando n\u00e3o encontrado\")\n\nmain() # passo 1\n\n",
            "lines": "66"
        }
    ]
}